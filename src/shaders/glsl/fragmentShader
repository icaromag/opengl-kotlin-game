#version 150

in vec2 passTextureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;

out vec4 out_color;

uniform sampler2D modelTexture;
uniform vec3 lightColor[4];

// specular [IM]
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void){
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitVectorToCamera = normalize(toCameraVector);

    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);

    for(int i = 0; i < 4; i++) {
        vec3 unitLightVector = normalize(toLightVector[i]);
        float nDot1 = dot(unitNormal, unitLightVector);
        // zero ambient light because of multiple sources
        //   cannot be calculated N times. It'll be too bright! [IM]
        float brightness = max(nDot1, 0.0);
        vec3 lightDirection = -unitLightVector;
        vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
        float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
        // should be greater than 0 [IM]
        specularFactor = max(specularFactor, 0.0);
        float dampedFactor = pow(specularFactor, shineDamper);
        totalDiffuse += brightness * lightColor[i];
        totalSpecular += dampedFactor * reflectivity * lightColor[i];
    }
    // The ambient lighting was moved to here [IM]
    totalDiffuse = max(totalDiffuse, 0.2);

    // transparency [IM]
    vec4 textureColor = texture(modelTexture,  passTextureCoordinates);

    // test the alpha value [IM]
    if(textureColor.a < 0.5) {
        discard;
    }

	out_color = vec4(totalDiffuse, 1.0) * textureColor + vec4(totalSpecular, 1.0);
	// apply the fog color by mixing based on camera distance [IM]
	out_color = mix(vec4(skyColor, 1.0), out_color, visibility);
}
