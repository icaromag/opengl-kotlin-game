#version 150

in vec2 passTextureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;

// specular [IM]
uniform float shineDamper;
uniform float reflectivity;

void main(void){
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLightVector = normalize(toLightVector);

    float nDot1 = dot(unitNormal, unitLightVector);

    // the second param greater than zero (0.2) means that
    //   we added the ambient factor to the lighting
    float brightness = max(nDot1, 0.2);
    vec3 diffuse = brightness * lightColor;

    // specular [IM]
    vec3 unitVectorToCamera = normalize(toCameraVector);
    vec3 lightDirection = -unitLightVector;
    vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
    float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
    // should be greater than 0 [IM]
    specularFactor = max(specularFactor, 0.0);
    float dampedFactor = pow(specularFactor, shineDamper);
    vec3 finalSpecular = dampedFactor * lightColor;

    // transparency [IM]
    // textureSampler is the modelTexture
    vec4 textureColor = texture(textureSampler,  passTextureCoordinates);

    // test the alpha value [IM]
    if(textureColor.a < 0.5) {
        discard;
    }

	out_color = vec4(diffuse, 1.0) * textureColor + vec4(finalSpecular, 1.0);
}
